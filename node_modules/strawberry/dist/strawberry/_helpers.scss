/// <reference path="./helpers/_color.scss" />
/// <reference path="./helpers/_typography.scss" />
/// <reference path="./helpers/_grid.scss" />
/// <reference path="./helpers/_elevation.scss" />
/// <reference path="./helpers/_clickable.placeholder.scss" />
/// <reference path="./helpers/_disable.placeholder.scss" />


// ==================
// Group dependencies
// ==================

/// <reference path="./common/_validation.scss" />
/// <reference path="./common/_string.scss" />
/// <reference path="./common/_list.scss" />
/// <reference path="./common/_scope.scss" />


// =============
// Group content
// =============

// Groups
// ======

// == Validation group ==

/// <reference path="./validation/_argument-type-error.function.scss" />
/// <reference path="./validation/_argument-value-error.function.scss" />
/// <reference path="./validation/_no-error.function.scss" />
/// <reference path="./validation/_validate-type.function.scss" />
/// <reference path="./validation/_validate.function.scss" />


// =============
// Group content
// =============

// Variables
// =========

/// The list of every type accepted by the type validation functions.
/// @access private
/// @group common
/// @type List
$_valid-types: 
'bool'
'color'
'list'
'list<bool>'
'list<color>'
'list<number>'
'list<string>'
'map'
'map<bool, bool>'
'map<bool, color>'
'map<bool, number>'
'map<bool, string>'
'map<color, bool>'
'map<color, color>'
'map<color, number>'
'map<color, string>'
'map<number, bool>'
'map<number, color>'
'map<number, number>'
'map<number, string>'
'map<string, bool>'
'map<string, color>'
'map<string, number>'
'map<string, string>'
'number'
'string'
!global;

// Functions
// =========

/// Returns a argument type error message.
/// @access public
/// @group common
/// @param {String} $argumentName - The name of the invalid argument
/// @param {String} $functionName - The name of the called function
/// @param {String} $expectedType ['%type%'] - The expected argument type
/// @return {String} - The error message
/// @example 
///   validate-type($foo, 'string', argument-type-error('$foo', 'bar()')
@function argument-type-error(
  $argumentName,
  $functionName,
  $expectedType: '%type%'
  ) {
  $this: 'argument-type-error()';
  @if no-error(
    validate-type($argumentName, 'string', 'argument `$argumentName` of `#{$this}` must be a string'),
    validate-type($functionName, 'string', 'argument `$functionName` of `#{$this}` must be a string'),
    validate-type($expectedType, 'string', 'argument `$expectedType` of `#{$this}` must be a string')
    ) {

  
    @return 'argument `#{$argumentName}` of `#{$functionName}` must be a #{$expectedType}';

  }
}
/// Returns a argument value error message.
/// @access public
/// @group common
/// @param {String} $argumentName - The name of the invalid argument
/// @param {String} $functionName - The name of the called function
/// @param {*} $invalidValue - The invalid values of the argument
/// @return {String} - The error message
/// @example 
///   validate-type(5, 'number', argument-type-error('$myArgs', 'myFn()', 0)
@function argument-value-error(
  $argumentName,
  $functionName,
  $invalidValues
  ) {
  $this: 'argument-value-error()';
  @if no-error(
    validate-type($argumentName, 'string', 'argument `$argumentName` of `#{$this}` must be a string'),
    validate-type($functionName, 'string', 'argument `$functionName` of `#{$this}` must be a string')
    ) {


    @return 'argument `#{$argumentName}` of `#{$functionName}` can\'t be `#{$invalidValues}`';

  }
}
/// A function block to put some validations
/// @access public
/// @group common
/// @return {Null}
/// @example 
///   @if no-error(
///     validate-type($foo, 'number', argument-type-error('$foo', 'bar()')),
///     validate($foo != 0, argument-value-error('$foo', 'bar()', 0))
///     ) { ... }
@function no-error(
  $validations...
  ) {


  @return true;

}
/// Throws an error if the given expression is false.
/// @access public
/// @group common
/// @param {Boolean} $expression - The expression to validate
/// @param {String} $errorMessage - The error message to display in case of false expression,
/// @param {Boolean} $continue [false] - If true, no error will be threw
/// @return {Boolean}
@function validate(
  $expression,
  $errorMessage,
  $continue: false
  ) {
  $this: 'validate()';
  // If `$expression` is not a boolean
  @if type-of($expression) != 'bool' {
    // throws an error.
    @error argument-type-error('$expression', $this, 'bool');
  }
  // If `$errorMessage` is not a string
  @if type-of($errorMessage) != 'string' {
    // throws an error.
    @error argument-type-error('$errorMessage', $this, 'string');;
  }
  // If `$continue` is not a boolean
  @if type-of($continue) != 'bool' {
    // throws an error.
    @error argument-type-error('$continue', $this, 'bool');;
  }


  @if $expression == false and $continue == false {
    @error $errorMessage;
  }

  @return $expression;
  
}
/// Throws an error if the given value is not equal to the expected type.
/// @access public
/// @group common
/// @param {*} $value - The value
/// @param {String} $expectedType - The expected type
/// @param {String} $errorMessage - The error message to display in case of error
/// @param {Boolean} $continue [false] - If true, no error will be threw
/// @return {Boolean}
/// @example 
///   validate-type($value, 'string', '$value must be a %type%')
@function validate-type(
  $value,
  $expectedType,
  $errorMessage,
  $continue: false
  ) {
  $this: 'validate-type()';
  // If `$expectedType` is not in the valid type list
  @if index($_valid-types, $expectedType) == null {
    // throws an error.
    @error argument-type-error('$value', $this, 'string contained in the following list: `#{$_valid-types}`');
  }
  // If `$errorMessage` is not a string
  @if type-of($errorMessage) != 'string' {
    // throws an error.
    @error argument-type-error('$errorMessage', $this, 'string');
  }
  // If `$continue` is not a boolean
  @if type-of($continue) != 'bool' {
    // throws an error.
    @error argument-type-error('$continue', $this, 'bool');;
  }
  
 
  $result: null;

  @if str-index($errorMessage, '%type%') {
    // Replaces any occurence of `%type%` in the error message with the expected type.
    $errorMessage: str-replace($errorMessage, '%type%', $expectedType);  
  }

  // If the type is a generic (ex: list<string>).
  @if str-index($expectedType, '<') != null and str-index($expectedType, '>') == str-length($expectedType) {
    // If $value is a list or a map.
    $values: $value;

    // Gets the generic type (type inside the carrets).
    $genericType: str-slice($expectedType, str-index($expectedType, '<') + 1, str-length($expectedType) - 1);

    // If $value is a list and the expected type is generic list
    @if type-of($value) == 'list' and str-index($expectedType, 'list') != null {
       
      // loops through the list
      @each $item in $values {
        // to validate type of each item.
        $result: validate(type-of($item) == $genericType, $errorMessage, $continue);
      }
    }

    // If $value is a map and the expected type is generic map
    @if type-of($value) == 'map' and str-index($expectedType, 'map') != null {
       
      $genericKeyType: str-slice($genericType, 1, str-index($genericType, ',') - 1);
      $genericValueType: str-slice($genericType, str-index($genericType, ',') + 2, str-length($genericType));

      // loops through the map
      @each $itemKey, $itemValue in $values {
        // to validate type of each item key and item value
        $result: validate(type-of($itemKey) == $genericKeyType, $errorMessage, $continue);
        // and to validate type of each item value.
        $result: validate(type-of($itemValue) == $genericValueType, $errorMessage, $continue);
      }
    }
  }
  @else {
    $result: validate(type-of($value) == $expectedType, $errorMessage, $continue);
  }

  @return $result;

}

// == String group ==

/// <reference path="./string/_str-contains.function.scss" />
/// <reference path="./string/_str-ends-with.function.scss" />
/// <reference path="./string/_str-replace.function.scss" />
/// <reference path="./string/_str-split.function.scss" />


// =============
// Group content
// =============

// Functions
// =========

/// Searches a substring at the end of a string.
/// @access public
/// @group common
/// @param {String} $string - The parent string
/// @param {String} $search - The substring to search
/// @return {Boolean} - True if the parent string ends with the substring
@function str-ends-with(
  $string,
  $search
  ) {
  $this: 'str-ends-with()';
  @if no-error(
    validate-type($string, 'string', argument-type-error('$string', $this, 'string')),
    validate-type($search, 'string', argument-type-error('$search', $this, 'string'))
    ) {



    // If the strings are equals
    @if $string == $search {
      // the parent string ends with the searched string.
      @return true;
    }

    $searchLength: str-length($search);
    $stringLength: str-length($string);

    // If the searched string is longer than the parent string
    @if $searchLength > $stringLength {
      // the parent string doesn't ends with the searched string.
      @return false;
    }
   
    // Gets the part of the parent string that we want to compare.
    $endToCompare: str-slice($string, $stringLength - $searchLength + 1);

    @return $endToCompare == $search;

  }
}
/// Searches a substring in a string.
/// @access public
/// @group common
/// @param {String} $string - The main string
/// @param {String} $search - The substring to search
/// @return {Boolean} - True if the main string contains the substring
@function str-contains(
  $string,
  $search
  ) {
  @if no-error(
    validate-type($string, 'string', argument-type-error('$string', 'str-contains()', 'string')),
    validate-type($search, 'string', argument-type-error('$search', 'str-contains()', 'string'))
    ) {


    @return str-index($string, $search) != null;
    
  }
}
/// Replaces a part of a character string with a given value.
/// @access public
/// @group common
/// @param {String} $string - The initial string
/// @param {String} $search - The substring to replace
/// @param {String} $replace - The replacement substring
/// @return {String} - The updated string
@function str-replace(
  $string,
  $search,
  $replace
  ) {
  @if no-error(
    validate-type($string, 'string', argument-type-error('$string', 'str-replace()', 'string')),
    validate-type($search, 'string', argument-type-error('$search', 'str-replace()', 'string')),
    validate($search != '', argument-value-error('$search', 'str-replace()', 'an empty string')),  
    validate-type($replace, 'string', argument-type-error('$replace', 'str-replace()', 'string'))
    ) {


    // Try to finds the position in the initial string of the first characters of the fist occurence of the string to replace.
    $searchStart: str-index($string, $search);
    
    // If an occurence of the search string is find.     
    @if $searchStart {
      // Gets the position in the initial string of the last characters of the fist occurence of the string to replace.
      $searchEnd: $searchStart + str-length($search);

      // Gets the characters that are before the string to replace.
      $partBefore: str-slice($string, 1, $searchStart - 1);

      // Gets the characters that are after the string to replace.
      $partAfter: str-slice($string, $searchEnd);

      // Replaces all other occurrences of the search string and return the new string.
      @return $partBefore + $replace + str-replace($partAfter, $search, $replace);
    }
    
    @return $string;
    
  }
}
/// Split a string into an list of substrings.
/// @access public
/// @group common
/// @param {String} $string - The string to split
/// @param {String} $delimiter [''] - The string that separate each substrings
/// @return {List} - The list of substrings
@function str-split(
  $string,
  $delimiter: ''
  ) {
  $this: 'str-split()';
  @if no-error(
    validate-type($string, 'string', argument-type-error('$string', $this)),
    validate($string != '', argument-value-error('$string', $this, '\'\'')),
    validate-type($delimiter, 'string', argument-type-error('$delimiter', $this))
    ) {

   
    // TODO(maximegelinas): Add comments.

    $result: ();
    $length: str-length($string);

    @if str-length($delimiter) == 0 {
      @for $i from 1 through $length {
        $result: append($result, str-slice($string, $i, $i));
      }
  
      @return $result;
    }

    $running: true;
    $remaining: $string;

    @while $running {
      $index: str-index($remaining, $delimiter);

      @if $index {
        $slice: str-slice($remaining, 1, $index - 1);
        $result: append($result, $slice);
        $remaining: str-slice($remaining, $index + str-length($delimiter));
      } 
      @else {
        $running: false;
      }
    }

    @return append($result, $remaining);

  }
}

// == List group ==

/// <reference path="./list/_first.function.scss" />
/// <reference path="./list/_prepend.function.scss" />
/// <reference path="./list/_remove-nth.function.scss" />
/// <reference path="./list/_remove-first.function.scss" />
/// <reference path="./list/_contains.function.scss" />


// =============
// Group content
// =============

// Functions
// =========

/// Returns the first element of a list.
/// @access public
/// @group common
/// @param {List} $list - The list containing the element
/// @return {*} - The first element of the given list
@function first(
  $list
  ) {
  @if no-error(
    validate-type($list, 'list', argument-type-error('$list', 'first()'))
    ) {


    @return nth($list, 1);

  }
}
/// Adds a new value at the beginning of a list.
/// @access public
/// @group common
/// @param {List} $list - The list that we want to expand
/// @param {*} $value - The value to add in the list
/// @return {List} - The new expanded list
@function prepend(
  $list, 
  $value
  ) {
  @if no-error(
    validate-type($list, 'list', argument-type-error('$list', 'prepend()'))
    ) {


    @return join($value, $list);

  }
}
/// Removes a element at a specific index in a list.
/// @access public
/// @group common
/// @param {List} $list - The list that we want to shrink
/// @param {Number} $index - The index of the element that we want to remove (can be negative to start from the end of the list)
/// @return {List} - The new shrinked list
@function remove-nth(
  $list,
  $index
  ) {
  @if no-error(
    validate-type($list, 'list', argument-type-error('$list', 'remove-nth()')),
    validate-type($index, 'number', argument-type-error('$index', 'remove-nth()')),
    validate($index != 0, argument-value-error('$index', 'remove-nth()', 0)),
    validate(abs($index) <= length($list), 'second argument `$index` of `remove-nth()` is #{$index} but the first argument `$list` is only #{length($list)} item long')
    ) {


    $result: ();
  
    // Calculates the element index if the index is negative.
    $index: if($index < 0, length($list) + $index + 1, $index);  
  
    @for $i from 1 through length($list) {
      // If the index is not the index that we want to remove,
      @if $i != $index {
        // adds the element at this index to the result.
        $result: append($result, nth($list, $i));
        }
      }
          
    @return $result;

    }
}
/// Removes a value at the beginning of a list.
/// @access public
/// @group common
/// @param {List} $list - The list that we want to shrink
/// @return {List} - The new shrinked list
@function remove-first(
  $list
) {
  @if no-error(
    validate-type($list, 'list', argument-type-error('$list', 'remove-first()'))
    ) {


    @return remove-nth($list, 1);

  }
}
/// Checks if a value is contained in a list.
/// @access public
/// @group common
/// @param {List} $list - The list to inspect
/// @param {*} $value - The value to find
/// @return {Boolean} - True if the value is found
@function contains(
  $list,
  $value
  ) {
  $this: 'contains()';
  @if no-error(
    validate-type($list, 'list', argument-type-error('$list', $this))
    ) {


    @return index($list, $value) != null;

  }
}



// == Map group ==

/// <reference path="./map/_map-deep-get.function.scss" />


// =============
// Group content
// =============

// Functions
// =========

/// Returns a deeply nested value from a map.
/// @access public
/// @group common
/// @param {Map} $map - The map containing the value
/// @param {List} $keys - The keys chain to access the value
/// @return {*} - The nested value
@function map-deep-get(
  $map,
  $keys
  ) {
  $this: 'map-deep-get()';
  @if no-error(
    validate-type($map, 'map', argument-type-error('$map', $this)),
    validate-type($keys, 'list', argument-type-error('$keys', $this))
    ) {


    // TODO(maximegelinas): Add comments.

    @each $key in $keys {
      @if type-of($map) == 'map' and map-has-key($map, $key) {
        $map: map-get($map, $key);
      }
      @else {
        @return null;
      }
    }

    @return $map;

  }
}

// == Scope group ==

/// <reference path="./scope/_base.function.scss" />
/// <reference path="./scope/_get.function.scss" />
/// <reference path="./scope/_new-scope.mixin.scss" />
/// <reference path="./scope/_this.function.scss" />


// =============
// Group content
// =============

// Variables
// =========

/// The stack of every scopes variables from the newer to the oldest
/// @access private
/// @group common
/// @type List
$_scope-variables-stack: () !global;

// Functions
// =========

/// Returns a variable from the current scope.
/// @access public
/// @group common
/// @param {String} $variablePath - The path of the variable to get
/// @return {*} - The scope variable
@function get(
  $variablePath
  ) {
  $this: 'get()';
  @if no-error(
    validate-type($variablePath, 'string', argument-type-error('$variablePath', $this))
    ) {

    // If we are not in a scope or the scope contains no variable.
    @if $_scope-variables-stack == () {
      @return null;
    }
    @else {
      // Gets the variables of the current scope.
      $scopeVariables: first($_scope-variables-stack);
    
      // Returns the asked variable or null if it doesn't exist.
      @return map-deep-get($scopeVariables, str-split($variablePath, ':'));
    }

  }
}
/// Returns the object where we are.
/// @access public
/// @group common
/// @param {String} $variablePath [''] - The path of the variable to get
/// @return {*} - The object
@function this(
  $variablePath: ''
  ) {
  $this: 'this()';
  @if no-error(
    validate-type($variablePath, 'string', argument-type-error('$variablePath', $this))
    ) {


    @if $variablePath != '' {
      $variablePath: ':#{$variablePath}';
    }

    $object: get('_this#{$variablePath}');

    @if $object == null {
      @error '`#{$this}` function can\'t be used outside of an object';
    }

    @return $object;

  }
}
/// Returns the parent object.
/// @access public
/// @group common
/// @param {String} $variablePath [''] - The path of the variable to get
/// @return {*} - The object
@function base(
  $variablePath: ''
  ) {
  $this: 'base()';
  @if no-error(
    validate-type($variablePath, 'string', argument-type-error('$variablePath', $this))
    ) {


    @if $variablePath != '' {
      $variablePath: ':#{$variablePath}';
    }

    $parentObject: get('_base#{$variablePath}');

    @if $parentObject == null {
      @error '`#{$this}` function can\'t be used outside of a nested object';
    }

    @return $parentObject;

  }
}

// Mixins
// ======

//// Creates a scope to store variables without affecting to global scope.
/// @access public
/// @group common
/// @param {string} $variables - The variables to store in the new scope
@mixin new-scope(
  $variables
  ) {
  @if no-error(
    validate-type($variables, 'map', argument-type-error('$variables', 'new-scope()'))
    ) {


    // Adds the variables to the scope.
    $_scope-variables-stack: prepend($_scope-variables-stack, $variables) !global;
  
    // Processes the scope execution.
    @content;
  
    // Removes the variables from the scope.
    $_scope-variables-stack: remove-first($_scope-variables-stack) !global;   

  } 
}

// =============
// Group content
// =============

// Groups
// ======

// == Color group ==

/// <reference path="./color/_random-color.function.scss" />


// =============
// Group content
// =============

// Variables
// =========

/// The list of possible random generated colors
/// @access private
/// @group helpers
/// @type List
$_random-colors:
#f44336
#9c27b0
#3f51b5
#03a9f4
#009688
#8bc34a
#ffeb3b
#ff9800
#795548
#607d8b !global;

/// The temporary list of the last generated colors
/// @access private
/// @group helpers
/// @type List
$_last-generated-color-indexes: () !global;


// Functions
// =========

/// Returns a random color.
/// @access public
/// @group helpers
/// @return {Color} - The generated color
@function random-color(
  ) {


  $limit: length($_random-colors);

  // If all colors has been generated
  @if length($_last-generated-color-indexes) == $limit {
    // resets the list of the last generated colors.
    $_last-generated-color-indexes: () !global;
  }
  
  $index: random($limit);
  
  // Finds a color that have not be generated before.
  @while contains($_last-generated-color-indexes, $index) {
    $index: random($limit);
  }
  
  // Logs the generated color.
  $_last-generated-color-indexes: append($_last-generated-color-indexes, $index) !global;

  // Returns the color.
  @return nth($_random-colors, $index);

}



// == Typography group ==

/// <reference path="./typography/_lower-text.placeholder.scss" />
/// <reference path="./typography/_upper-text.placeholder.scss" />


// =============
// Group content
// =============

// Placeholders
// ============

%lower-text {

  text-transform: lowercase;
  
}

%upper-text {

  text-transform: uppercase;
  
}



// == Grid group ==

/// <reference path="./grid/_cell.mixin.scss" />
/// <reference path="./grid/_cell-priority.mixin.scss" />
/// <reference path="./grid/_column.mixin.scss" />
/// <reference path="./grid/_column-content.mixin.scss" />
/// <reference path="./grid/_column-flow.mixin.scss" />
/// <reference path="./grid/_column-width.mixin.scss" />
/// <reference path="./grid/_row.mixin.scss" />
/// <reference path="./grid/_row-content.mixin.scss" />
/// <reference path="./grid/_row-flow.mixin.scss" />


// =============
// Group content
// =============

// Placeholders
// ============

%grid-element {

  box-sizing: border-box;

}

%grid-container {

  @extend %grid-element;
  display: flex;

}

%row {

  @extend %grid-container;
  align-items: stretch;
  flex-direction: row;
  flex-wrap: wrap;
  
}

%column {

  @extend %grid-container;
  flex-direction: column;
  
}

%cell {

  @extend %grid-element;
  min-width: 0;

}


// Mixins
// ======

/// Outputs the row flow.
/// @access public
/// @group helpers
/// @param {String} $flow - The flow
@mixin row-flow(
  $flow
  ) {
  $this: 'row-flow()';
  @if no-error(
    validate-type($flow, 'string', argument-type-error('$flow', $this))
    ) {


    @if $flow == 'normal' {
      flex-direction: row;
    }
    @else if $flow == 'reversed' {
      flex-direction: row-reverse;
    }

  }    
}

/// Outputs the css for a row.
/// @access public
/// @group helpers
/// @param {String} $flow ['normal'] - The flow
@mixin row(
  $flow: 'normal'
  ) {


  @extend %row;
  
  @include row-flow($flow);

}

/// Applies css on the content of a row.
/// @access public
/// @group helpers
/// @param {String} $alignement - The content alignement
@mixin row-content(
  $alignement
  ) {
  $this: 'row-content()';
  @if no-error(
    validate-type($alignement, 'string', argument-type-error('$alignement', $this))
    ) {


    @if $alignement == 'left' {
      justify-content: flex-start;
    }
    @else if $alignement == 'right' {
      justify-content: flex-end;
    }
    @else {
      justify-content: #{$alignement};
    }

  }    
}

/// Outputs the column flow.
/// @access public
/// @group helpers
/// @param {String} $flow - The flow
@mixin column-flow(
  $flow
  ) {
  $this: 'column-flow()';
  @if no-error(
    validate-type($flow, 'string', argument-type-error('$flow', $this))
    ) {


    @if $flow == 'normal' {
      flex-direction: column;
    }
    @else if $flow == 'reversed' {
      flex-direction: column-reverse;
    }

  }    
}

/// Outputs the column width.
/// @access public
/// @group helpers
/// @param {Number} $width - The width
@mixin column-width(
  $width
  ) {
  $this: 'column-width()';
  @if no-error(
    validate(type-of($width) == 'string' or type-of($width) == 'number', 'argument `$width` of `#{$this}` must be a string or a number')
    ) {


    @if $width == 'auto' {
      flex: 1 1 auto;
      max-width: none;
    }
    @else {
      flex: 0 1 #{$width};
      max-width: #{$width};
    }

  }    
}

/// Outputs the css for a column.
/// @access public
/// @group helpers
/// @param {String|Number} $width ['auto'] - The width
/// @param {String} $flow ['normal'] - The flow
@mixin column(
  $width: 'auto',
  $flow: 'normal'
  ) {


  @extend %column;

  @include column-width($width);
  
  @include column-flow($flow);
   
}

/// Applies css on the content of a column.
/// @access public
/// @group helpers
/// @param {String} $alignement - The content alignement
@mixin column-content(
  $alignement
  ) {
  $this: 'column-content()';
  @if no-error(
    validate-type($alignement, 'string', argument-type-error('$alignement', $this))
    ) {


    @if $alignement == 'top' {
      justify-content: flex-start;
    }
    @else if $alignement == 'bottom' {
      justify-content: flex-end;
    }
    @else {
      justify-content: #{$alignement};
    }

  }    
}

/// Outputs the cell priority.
/// @access public
/// @group helpers
/// @param {Number} $priority - The priority
@mixin cell-priority(
  $priority
  ) {
  $this: 'cell-priority()';
  @if no-error(
    validate-type($priority, 'number', argument-type-error('$priority', $this))
    ) {


    order: $priority;

  }    
}

/// Outputs the css for a cell.
/// @access public
/// @group helpers
/// @param {Number} $priority - The priority
@mixin cell(
  $priority: 0
  ) {


  @extend %cell;
  
  @include cell-priority($priority);

}



// == Elevation group ==

/// <reference path="./elevation/_elevation.mixin.scss" />
/// <reference path="./elevation/_elevation-transition.mixin.scss" />


// =============
// Group content
// =============

// Variables
// =========

// =================
// Ambient varialbes
// =================

/// The ambient color
/// @access private
/// @group helpers
/// @type Color
$_ambient-elevation-color: rgba(black, .12) !global;

/// The ambient values with their elevation intensity
/// @access private
/// @group helpers
/// @type Map
$_ambient-elevation-map: (
  0: '0 0 0 0 #{$_ambient-elevation-color}',
  1: '0 1px 3px 0 #{$_ambient-elevation-color}',
  2: '0 1px 5px 0 #{$_ambient-elevation-color}',
  3: '0 1px 8px 0 #{$_ambient-elevation-color}',
  4: '0 1px 10px 0 #{$_ambient-elevation-color}',
  5: '0 1px 14px 0 #{$_ambient-elevation-color}',
  6: '0 1px 18px 0 #{$_ambient-elevation-color}',
  7: '0 2px 16px 1px #{$_ambient-elevation-color}',
  8: '0 3px 14px 2px #{$_ambient-elevation-color}',
  9: '0 3px 16px 2px #{$_ambient-elevation-color}',
  10: '0 4px 18px 3px #{$_ambient-elevation-color}',
  11: '0 4px 20 3px #{$_ambient-elevation-color}',
  12: '0 5px 22px 4px #{$_ambient-elevation-color}',
  13: '0 5px 24px 4px #{$_ambient-elevation-color}',
  14: '0 5px 26px 4px #{$_ambient-elevation-color}',
  15: '0 6px 28px 5px #{$_ambient-elevation-color}',
  16: '0 6px 30 5px #{$_ambient-elevation-color}',
  17: '0 6px 32px 5px #{$_ambient-elevation-color}',
  18: '0 7px 34px 6px #{$_ambient-elevation-color}',
  19: '0 7px 36px 6px #{$_ambient-elevation-color}',
  20: '0 8px 38px 7px #{$_ambient-elevation-color}',
  21: '0 8px 40 7px #{$_ambient-elevation-color}',
  22: '0 8px 42px 7px #{$_ambient-elevation-color}',
  23: '0 9px 44px 8px #{$_ambient-elevation-color}',
  24: '0 9px 46px 8px #{$_ambient-elevation-color}'
) !global;

// ==================
// Penumbra varialbes
// ==================

/// The penumbra color
/// @access private
/// @group helpers
/// @type Color
$_penumbra-elevation-color: rgba(black, .14) !global;

/// The penumbra values with their elevation intensity
/// @access private
/// @group helpers
/// @type Map
$_penumbra-elevation-map: (
  0: '0 0 0 0 #{$_penumbra-elevation-color}',
  1: '0 1px 1px 0 #{$_penumbra-elevation-color}',
  2: '0 2px 2px 0 #{$_penumbra-elevation-color}',
  3: '0 3px 4px 0 #{$_penumbra-elevation-color}',
  4: '0 4px 5px 0 #{$_penumbra-elevation-color}',
  5: '0 5px 8px 0 #{$_penumbra-elevation-color}',
  6: '0 6px 10px 0 #{$_penumbra-elevation-color}',
  7: '0 7px 10px 1px #{$_penumbra-elevation-color}',
  8: '0 8px 10px 1px #{$_penumbra-elevation-color}',
  9: '0 9px 12px 1px #{$_penumbra-elevation-color}',
  10: '0 10px 14px 1px #{$_penumbra-elevation-color}',
  11: '0 11px 15px 1px #{$_penumbra-elevation-color}',
  12: '0 12px 17px 2px #{$_penumbra-elevation-color}',
  13: '0 13px 19px 2px #{$_penumbra-elevation-color}',
  14: '0 14px 21px 2px #{$_penumbra-elevation-color}',
  15: '0 15px 22px 2px #{$_penumbra-elevation-color}',
  16: '0 16px 24px 2px #{$_penumbra-elevation-color}',
  17: '0 17px 26px 2px #{$_penumbra-elevation-color}',
  18: '0 18px 28px 2px #{$_penumbra-elevation-color}',
  19: '0 19px 29px 2px #{$_penumbra-elevation-color}',
  20: '0 20 31px 3px #{$_penumbra-elevation-color}',
  21: '0 21px 33px 3px #{$_penumbra-elevation-color}',
  22: '0 22px 35px 3px #{$_penumbra-elevation-color}',
  23: '0 23px 36px 3px #{$_penumbra-elevation-color}',
  24: '0 24px 38px 3px #{$_penumbra-elevation-color}'
) !global;

// ===============
// Umbra varialbes
// ===============

/// The umbra color
/// @access private
/// @group helpers
/// @type Color
$_umbra-elevation-color: rgba(black, .2) !global;

/// The umbra values with their elevation intensity
/// @access private
/// @group helpers
/// @type Map
$_umbra-elevation-map: (
  0: '0 0 0 0 #{$_umbra-elevation-color}',
  1: '0 2px 1px -1px #{$_umbra-elevation-color}',
  2: '0 3px 1px -2px #{$_umbra-elevation-color}',
  3: '0 3px 3px -2px #{$_umbra-elevation-color}',
  4: '0 2px 4px -1px #{$_umbra-elevation-color}',
  5: '0 3px 5px -1px #{$_umbra-elevation-color}',
  6: '0 3px 5px -1px #{$_umbra-elevation-color}',
  7: '0 4px 5px -2px #{$_umbra-elevation-color}',
  8: '0 5px 5px -3px #{$_umbra-elevation-color}',
  9: '0 5px 6px -3px #{$_umbra-elevation-color}',
  10: '0 6px 6px -3px #{$_umbra-elevation-color}',
  11: '0 6px 7px -4px #{$_umbra-elevation-color}',
  12: '0 7px 8px -4px #{$_umbra-elevation-color}',
  13: '0 7px 8px -4px #{$_umbra-elevation-color}',
  14: '0 7px 9px -4px #{$_umbra-elevation-color}',
  15: '0 8px 9px -5px #{$_umbra-elevation-color}',
  16: '0 8px 10px -5px #{$_umbra-elevation-color}',
  17: '0 8px 11px -5px #{$_umbra-elevation-color}',
  18: '0 9px 11px -5px #{$_umbra-elevation-color}',
  19: '0 9px 12px -6px #{$_umbra-elevation-color}',
  20: '0 10px 13px -6px #{$_umbra-elevation-color}',
  21: '0 10px 13px -6px #{$_umbra-elevation-color}',
  22: '0 10px 14px -6px #{$_umbra-elevation-color}',
  23: '0 11px 14px -7px #{$_umbra-elevation-color}',
  24: '0 11px 15px -7px #{$_umbra-elevation-color}'
) !global;

// Mixins
// ======

/// Gives the impression that an element is elevated.
/// @access public
/// @group helpers
/// @param {Number} $zValue - The elevation intensity
/// @output The specified elevation
@mixin elevation(
  $zValue
  ) {
  $this: 'elevation()';
  @if no-error(
    validate-type($zValue, 'number', argument-type-error('$zValue', $this)),
    validate(0 <= $zValue and $zValue <= 24, argument-value-error('$zValue', $this, 'smaller than `0` or higher than `24`'))
    ) {


    box-shadow: #{map-get($_umbra-elevation-map, $zValue)}, #{map-get($_penumbra-elevation-map, $zValue)}, #{map-get($_ambient-elevation-map, $zValue)};

  }    
}
/// Allows a visual transition between the elevation states.
/// @access public
/// @group helpers
/// @param {String} $duration - The transition duration
/// @param {String} $duration - The speed variation
/// @output The transition code
@mixin elevation-transition(
  $duration: '280ms',
  $easing: 'cubic-bezier(.4, 0, .2, 1)'
  ) {
  $this: 'elevation-transition()';
  @if no-error(
    validate-type($duration, 'string', argument-type-error('$duration', $this)),
    validate-type($easing, 'string', argument-type-error('$easing', $this))
    ) {


    transition: box-shadow #{$duration} #{$easing};
    will-change: box-shadow;

  }    
}

// Placeholders
// ============

%clickable {

  cursor: pointer;
  
}
%disable {

  cursor: not-allowed;
  pointer-events: none;
  
}
